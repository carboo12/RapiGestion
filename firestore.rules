
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isAdministrator() {
        return isSignedIn() && getUserData(request.auth.uid).role == 'Administrador';
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    // Rules for collections
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isAdministrator() || isOwner(userId);
    }
    
    match /clients/{clientId} {
      allow read: if isSignedIn();
      // Allow writes only by admins or collection managers
      allow write: if isSignedIn() && (getUserData(request.auth.uid).role == 'Administrador' || getUserData(request.auth.uid).role == 'Gestor de Cobros');
    }
    
    match /credits/{creditId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn(); // More specific rules can be added later
    }
    
    match /references/{refId} {
      allow read, write: if isSignedIn();
    }
    
    match /guarantees/{guaranteeId} {
      allow read, write: if isSignedIn();
    }

    // Rules for Routes
    match /routes/{routeId} {
      // Admins can manage all routes
      allow create, update, delete: if isAdministrator();
      
      // Admins can read all routes. Others can only read their own routes.
      allow read: if isAdministrator() || (isSignedIn() && resource.data.collectorId == request.auth.uid);
    }

    // Rules for Notifications
    match /users/{userId}/notifications/{notificationId} {
      // Users can only manage their own notifications
      allow read, write: if isOwner(userId);
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

    