
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Función para verificar si un usuario es un administrador.
    // Comprueba el campo 'role' en el documento del usuario.
    function isAdministrator(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'Administrador';
    }

    // Los clientes pueden ser creados por usuarios autenticados, y leídos por cualquiera.
    match /clients/{clientId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Los créditos pueden ser creados/actualizados por usuarios autenticados.
     match /credits/{creditId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Las referencias pueden ser creadas/actualizadas por usuarios autenticados.
    match /references/{referenceId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
    }

    // Las garantías pueden ser creadas/actualizadas por usuarios autenticados.
    match /guarantees/{guaranteeId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
    }

    // Las rutas solo pueden ser escritas por administradores.
    // Cualquier usuario autenticado puede leerlas (ej. un gestor viendo su ruta).
    match /routes/{routeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdministrator(request.auth.uid);
    }
    
    // La información de los usuarios puede ser leída por usuarios autenticados.
    // La creación está manejada por la autenticación de Firebase, y solo los
    // administradores deberían poder modificar roles (regla a futuro).
    match /users/{userId} {
      allow read: if request.auth != null;
      // Solo el propio usuario o un admin puede modificar su documento.
      allow update: if request.auth != null && (request.auth.uid == userId || isAdministrator(request.auth.uid));
      // La creación se gestiona desde el backend de la app.
      allow create: if request.auth != null && isAdministrator(request.auth.uid);
    }
    
     // Colección para el registro de acciones
    match /action_logs/{logId} {
      // Solo los administradores pueden leer los logs
      allow read: if request.auth != null && isAdministrator(request.auth.uid);
      // Las acciones son registradas por el sistema (usuarios autenticados)
      allow create: if request.auth != null;
      // Nadie puede modificar o borrar los logs para mantener la integridad
      allow update, delete: if false;
    }

    // Por defecto, denegar todas las demás lecturas/escrituras.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
